image: docker:latest

stages:
  - style
  - security
  - tests

variables:
  DOCKER_IMAGE: ${DOCKER_REGISTRY_DEV}/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHORT_SHA
  DOCKER_IMAGE_CACHE: ${DOCKER_REGISTRY_DEV}/ci-image:latest

style:
  stage: style
  image: ${DOCKER_IMAGE_CACHE}
  script:
    - chmod u+x pre_commit_style.sh && ./pre_commit_style.sh
  artifacts:
    when: always
  except:
    - master

security_check:
  image: python:3.10-alpine
  stage: security
  before_script:
    - python -m pip install --upgrade pip
    - python -m pip install safety
  script:
    - safety check -r requirements.txt --ignore=39659 --ignore=42692 --ignore=46499
  only:
    - merge_requests

tests:
  stage: tests
  variables:
    POSTGRES_DB: db
    POSTGRES_USER: user
    POSTGRES_PASSWORD: pass
    POSTGRES_HOST_AUTH_METHOD: trust
    SQL_HOST: postgres
    SQL_USER: user
    SQL_PASSWORD: pass
    SQL_PORT: 5432
    SQL_DATABASE: db
  services:
    - name: postgres:13.0-alpine
      alias: postgres
  image: ${DOCKER_IMAGE_CACHE}
  script:
    - cd src && python -m pytest -vvv --ignore=./tests/legacy --disable-warnings ./tests -p no:cacheprovider --cov=app --cov-report term-missing --cov-report xml:../coverage.xml . --junitxml=../report.xml
  artifacts:
    when: always
    paths:
      - report.xml
      - coverage.xml
    expire_in: 1 week
  except:
    - dev
    - master

